{
	"name": "DF-Quality KPI ETL2",
	"properties": {
		"folder": {
			"name": "Quality ETL"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsQualityETL2_KPIs",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DWFactKPI",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DWFactKPI",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Insert"
				},
				{
					"name": "Update"
				},
				{
					"name": "Select2"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "Filter2"
				}
			],
			"script": "source(output(\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkDomain as integer,\n\t\tfkMetric as long,\n\t\tfkTimeLine as integer,\n\t\tfkDate as date,\n\t\tValue as double,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tpkiFactKPI as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 split(isNull(pkiFactKPI),\n\tdisjoint: true) ~> ConditionalSplit1@(NoMatchIns, MatchUpd)\nFilter1 select(mapColumn(\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkDomain,\n\t\tfkMetric,\n\t\tfkTimeLine,\n\t\tfkDate,\n\t\tValue,\n\t\tfkBatch,\n\t\tLastUpdated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 alterRow(insertIf(true())) ~> Insert\nSelect2 alterRow(updateIf(true())) ~> Update\nFilter2 select(mapColumn(\n\t\tValue,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tpkiFactKPI\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nConditionalSplit1@NoMatchIns filter(isNull(pkiFactKPI)) ~> Filter1\nConditionalSplit1@MatchUpd filter(!isNull(pkiFactKPI)) ~> Filter2\nInsert sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tfkBatch,\n\t\tLastUpdated\n\t)) ~> sink1\nUpdate sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tfkBatch,\n\t\tLastUpdated\n\t)) ~> sink2"
		}
	}
}